generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Usuario {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  nombre    String
  rol       Rol      @default(CLIENTE)
  avatar    String?
  createdAt DateTime @default(now())

  pedidos Pedido[]
}

enum Rol {
  ADMIN
  CLIENTE
}

model Producto {
  id          String         @id @default(uuid())
  titulo      String
  descripcion String
  descuento   Float          @default(0)
  descontable Boolean        @default(false)
  estado      EstadoProducto @default(NUEVO)
  visible     Boolean        @default(true)
  createdAt   DateTime       @default(now())
  subtitulo   String         @default("")
  url         String         @default("")
  imagenes    Imagen[]
  variantes   Variante[]
  itemsPedido ItemPedido[]

  categoriasProducto CategoriaProducto[]
}

model Categoria {
  id      String  @id @default(uuid())
  nombre  String  @unique
  slug    String  @unique
  visible Boolean @default(true)

  categoriasProducto CategoriaProducto[]
}

model CategoriaProducto {
  id          String    @id @default(uuid())
  producto    Producto  @relation(fields: [productoId], references: [id])
  productoId  String
  categoria   Categoria @relation(fields: [categoriaId], references: [id])
  categoriaId String
  asignadoEn  DateTime  @default(now())
  prioridad   Int       @default(0)

  @@unique([productoId, categoriaId])
}

model Variante {
  id             String       @id @default(cuid())
  titulo         String
  precio         Float
  codigoHexColor String? // opcional
  talla          String? // opcional
  tipo           VarianteTipo // POR_DEFECTO u OPCION
  estado         Boolean // activo o no
  producto       Producto     @relation(fields: [productoId], references: [id])
  productoId     String
}

enum VarianteTipo {
  POR_DEFECTO
  OPCION
}

model Imagen {
  id         String   @id @default(uuid())
  url        String
  producto   Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)
  productoId String
  orden      Int
}

model Pedido {
  id        String       @id @default(uuid())
  usuarioId String
  usuario   Usuario      @relation(fields: [usuarioId], references: [id])
  creadoEn  DateTime     @default(now())
  estado    EstadoPedido @default(PENDIENTE)
  total     Float
  moneda    String       @default("USD")

  items ItemPedido[]
}

model ItemPedido {
  id         String @id @default(uuid())
  productoId String
  pedidoId   String
  cantidad   Int

  producto Producto @relation(fields: [productoId], references: [id])
  pedido   Pedido   @relation(fields: [pedidoId], references: [id])
}

enum EstadoProducto {
  NUEVO
  USADO
}

enum EstadoPedido {
  PENDIENTE
  PAGADO
  ENVIADO
  ENTREGADO
  CANCELADO
}

enum Genero {
  HOMBRE
  MUJER
  NIÃ‘O
  UNISEX
}
